AWSTemplateFormatVersion: 2010-09-09
Description: Creating RDS 


Parameters:
   NetworkStack:
     Type: String
     Default: "network-stack"
   Environment:
     Type: String
     Default: "Production"
  
Conditions:
  IsProd: !Equals [ !Ref Environment, "Test" ]
Resources: 
  RDSSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Oracle Subnet Group
      DBSubnetGroupName: RDSSubnetGroup
      SubnetIds: 
        - !ImportValue network-stackPublicSubnet1Id                                     #importing export key directly from another stack
        - { "Fn::ImportValue" : {"Fn::Sub": "${NetworkStack}PublicSubnet2Id" } }        # other way around
      Tags: 
        - Key: BU
          Value: ERAS
        - Key: Name
          Value: RDSSubnetGroup

  #ClusterParameterGroup:
   # Type: AWS::RDS::DBClusterParameterGroup
    #Properties:
     # DBClusterParameterGroupName: PgAuroraClusterPG
      #Description: Postgres aurora cluster parameter group
      #Family: aurora-postgresql15
      #Parameters: 
       # shared_preload_libraries: pgaudit

  #PostgresclusterDBParameterGroup:
  #  Type: 'AWS::RDS::DBParameterGroup'
   # Properties:
    #  DBParameterGroupName : PostgresClusterDBParameterGroup
     # Description: Postgres Cluster DB Parameter Group
     # Family: aurora-postgresql15
     # Parameters:
      #  shared_preload_libraries: pgaudit
       # log_statement: 'all'
        #logging_collector: 'on'        
      
  RDSParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      DBParameterGroupName : RDSParameterGroup
      Description: RDS Parameter Group
      Family: oracle-se2-19
      Parameters:
        cursor_sharing: force
        open_cursors: 200
        enable_ddl_logging: TRUE
        audit_trail: 'DB,EXTENDED'

  #PostgresRDSParameterGroup:
   # Type: 'AWS::RDS::DBParameterGroup'
    #Properties:
     # DBParameterGroupName : PostgresRDSParameterGroup
      #Description: Postgres RDS Parameter Group
      #Family: postgres16
      #Parameters:
       # autovacuum: "on"
           
  RDSOptionGroup:   
    Type: AWS::RDS::OptionGroup
    Properties:
      EngineName: oracle-se2
      MajorEngineVersion: 19
      OptionGroupDescription: Oracle RDS Option group
      OptionGroupName: RDSOptionGroup
      OptionConfigurations:
        - OptionName: STATSPACK
        - OptionName: UTL_MAIL
        - OptionName: Timezone  
          OptionSettings:
            - Name: TIME_ZONE
              Value: UTC 

  #DBCluster:
   # Type: AWS::RDS::DBCluster
    #DependsOn: [ClusterDBSubnetGroup]
    #Properties:
     # DBClusterIdentifier: "sales-cluster"
      #Engine: aurora-postgresql
      #EngineVersion : 15.5
      #Port: 5432
      #DBSubnetGroupName: !Ref RDSSubnetGroup
      #BackupRetentionPeriod: 1
      #MasterUsername: postgres
      #MasterUserPassword: "pass123#"
      #DatabaseName: salespg
      #StorageEncrypted: false
      #DBClusterParameterGroupName: !Ref ClusterParameterGroup
      #VpcSecurityGroupIds: 
       # - !ImportValue network-stackSalesSSHSecurityGroup

  #DBPrimaryNode:
   # Type: AWS::RDS::DBInstance
    #DependsOn: DBCluster
    #Properties:
     # DBInstanceIdentifier: sales-cluster-node01
     # DBClusterIdentifier: !Ref DBCluster
      #DBInstanceClass: db.t3.medium
      #MultiAZ: True
      #Engine: aurora-postgresql
      #EngineVersion : 15.5
      #DBParameterGroupName: !Ref PostgresclusterDBParameterGroup
      #PubliclyAccessible: true
  #DBSecondaryNode:
   # Type: AWS::RDS::DBInstance
    #DependsOn: DBCluster
    #Properties:
     # DBInstanceIdentifier: sales-cluster-node02
      #DBClusterIdentifier: !Ref DBCluster
      #MultiAZ: True
      #DBInstanceClass: db.t3.medium
      #AvailabilityZone: us-east-1a
      #Engine: aurora-postgresql
      #EngineVersion : 15.5
      #PubliclyAccessible: true

  #DBTertiaryNode:
    #Type: AWS::RDS::DBInstance
    #DependsOn: DBCluster
    #Properties:
      #DBInstanceIdentifier: sales-cluster-node03
      #DBClusterIdentifier: !Ref DBCluster
      #DBInstanceClass: db.t3.medium
      #Engine: aurora-postgresql
      #EngineVersion : 15.5
      #PubliclyAccessible: true

  #PostgresRDSInstance:
    #Type: AWS::RDS::DBInstance
    #Properties:
      #AllocatedStorage: 5
      #AllowMajorVersionUpgrade: false        
      #ApplyImmediately: true
      #AutoMinorVersionUpgrade: false
      #AvailabilityZone: !Select [ 0, !GetAZs '' ]
      #DBInstanceClass: db.m5.large
      #DBInstanceIdentifier: pg-sales
      #DBName: pgsales
      #DBParameterGroupName: !Ref PostgresRDSParameterGroup
      #VPCSecurityGroups:                                            # we are using VPC based DB so we used it. If you use DBSecurityGroups property then you will run into API error.
        #- !ImportValue network-stackSalesSSHSecurityGroup
      #DBSubnetGroupName: !Ref RDSSubnetGroup
      #Engine: "postgres"
      #EngineVersion: "16.8"
      #ManageMasterUserPassword: false
      #MasterUsername: postgres
      #MasterUserPassword: "pass123#"                                # this is password based admin user creation.
      #MultiAZ: false
      #Port: 5432
      #PubliclyAccessible: true
      #StorageType: standard
      #BackupRetentionPeriod: 0
      #MaxAllocatedStorage: 5
      #Tags:
        #- Key: RDSbackup
          #Value: "true"
        #- Key: BU
          #Value: ERAS
        #- Key: OwnerEmail
          #Value: "rajatsanwal@ltimindtree.com"                            # can't contain @, otherwise stack will go in update rollback failed.
        #- Key: OwnerName
          #Value: "Rajat Sanwal"
        #- Key: "Owner Organization"
          #Value: "LTI Mindtree"
  

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false        
      #ApplyImmediately: true
      AutoMinorVersionUpgrade: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      DBInstanceClass: db.t3.medium
      DBInstanceIdentifier: sales-prod
      DBName: salespd
      DBParameterGroupName: !Ref RDSParameterGroup
      VPCSecurityGroups:                                            # we are using VPC based DB so we used it. If you use DBSecurityGroups property then you will run into API error.
        - !ImportValue network-stackSalesSSHSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: oracle-se2
      EngineVersion: "19.0.0.0.ru-2024-07.rur-2024-07.r1"
      LicenseModel: "bring-your-own-license"
      ManageMasterUserPassword: false
      MasterUsername: admin
      MasterUserPassword: "pass123#"                                # this is password based admin user creation.
      MultiAZ: false
      OptionGroupName: !Ref RDSOptionGroup
      Port: 1521
      #ApplyImmediately: false
      PubliclyAccessible: true
      StorageType: gp3
      BackupRetentionPeriod: 0
      MaxAllocatedStorage: 30
      Tags:
        - Key: RDSbackup
          Value: "true"
        - Key: BU
          Value: ERAS
        - Key: OwnerEmail
          Value: "rajatsanwal@ltimindtree.com"                            # can't contain @, otherwise stack will go in update rollback failed.
        - Key: OwnerName
          Value: "Rajat Sanwal"
        - Key: "Owner Organization"
          Value: "LTI Mindtree"
  
  #RDSMasterSecret: 
  #  Type: AWS::SecretsManager::Secret                                           # Ratation is by default off.
  #  Properties: 
  #    Description: ASM secret for Admin user.
  #    GenerateSecretString: 
  #      ExcludeCharacters: '@~=/'
  #      ExcludeLowercase: false
  #      ExcludeNumbers: false
  #      ExcludePunctuation: false
  #      ExcludeUppercase: false
  #      GenerateStringKey: "password"
  #      IncludeSpace: false
  #      PasswordLength: 20
  #      RequireEachIncludedType: true
  #      SecretStringTemplate: '{"username": "admin","BU": "Business-Test"}'
  #    Name: "/db-credential/sales-prod/admin"
  #    
  #MasterSecretAttachment: 
  #  Type: AWS::SecretsManager::SecretTargetAttachment                   # this doesn't changes password
  #  Properties: 
  #    SecretId: !Ref RDSMasterSecret
  #    TargetId: !Ref RDSInstance
  #    TargetType: AWS::RDS::DBInstance
  #    
#S#etting to true   
  #MasterrotationSchedule:
  #  Type: AWS::SecretsManager::RotationSchedule
  #  DependsOn: 
  #    - MasterSecretAttachment
  #  Properties:
  #    RotateImmediatelyOnUpdate: false
  #    RotationLambdaARN: arn:aws:lambda:ap-south-1:975050076353:function:SecretsManageradminRotate
  #    RotationRules: 
  #      AutomaticallyAfterDays: 40
  #      #Duration: 3h
  #    SecretId: !Ref RDSMasterSecret
###@#
  Credential:
    Type: AWS::CloudFormation::Stack
    #Condition: IsProd
    Properties:
      TemplateURL: !Sub 'https://mys3bucketnewlti.s3.ap-south-1.amazonaws.com/sales-oracle-db-infra/dbusers.yaml'
      TimeoutInMinutes: 60      
      Parameters:
         TargetId: !Ref RDSInstance
         DbInstanceIdentifier: 'sales-prod'
         MasterArn: "test_arn"
##Outputs:
 # StackRef:
  #  Value: !Ref Credential
  #OutputFromNestedStack:
   # Value: !GetAtt Credential.Outputs.BucketName







##Outputs:
 # StackRef:
  #  Value: !Ref Credential
  #OutputFromNestedStack:
   # Value: !GetAtt Credential.Outputs.BucketName



      



     




############## What was the critical learning outcome?
# Say you created a db with hard coded password "pass123#. Later you updated the template and included ASM in it. Now when you modify the stack with new template
# it will create a new password in ASM. But it will automatically sync with DB. DB will continue to have old password. You have to manually sync the password 
# with alter user command. Once it is synced, future rotations will automatically sync otherwise rotations will fail.
