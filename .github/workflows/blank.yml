# This is a basic workflow to help you get started with Actions

name: Oracle-Sales-RDS-Stack-Deploy

# #Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      choice:
        description: 'Is evaluation needed. Seriously ?'
        type: choice
        options:
          - yes
          - no


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  Template-Validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Template_Validation
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ vars.AWS_REGION }}    
          aws cloudformation validate-template --template-body file://s3_bucket.yaml
           

  # This workflow contains a single job called "build"
  Eval-Create-Changeset:
    needs: [ Template-Validation ]
    if: (github.events.inputs.choice == 'yes')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo Hello, world!

  Eval-Deploy-Changeset:
    needs: [Eval-Create-Changeset ]
    if: always() && (github.event.inputs.choice == 'yes' && needs.Eval-Create-Changeset.result == 'success') && (needs.Template-Validation.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: | 
          echo "choice is ${{ github.event.inputs.choice }}" / ${{ inputs.choice }}

          
  Development-Create-changeset:
    needs: [ Eval-Deploy-Changeset ]
    environment: development
    if: always() && ( needs.Eval-Create-Changeset.result == 'skipped' ||  needs.Eval-Deploy-Changeset.result == 'success') && ( needs.Template-Validation.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: | 
           echo "Environment secrets Aws Access Key value is ${{ secrets.AWS_ACCESS_KEY_ID }}" 
           echo "Region is: ${{ vars.AWS_REGION }}"
           echo "choice is ${{ github.event.inputs.choice }}" / ${{ inputs.choice }}
           
      #- name: Configure AWS Credentials
       # uses: aws-actions/configure-aws-credentials@v3
        #with:
         # aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          #aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
          #aws-region: ${{ vars.AWS_REGION }}
      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ vars.AWS_REGION }}    
          aws cloudformation create-change-set --stack-name s3Bucket --change-set-name addingnewsbucket16march--template-body file://s3_bucket.yaml --parameters ParameterKey=MyBucketName,UsePreviousValue=true
          
          
  Development-Deploy-changeset:
    needs: [ Development-Create-changeset ]
    environment: development
    if: always() && (needs.Development-Create-changeset.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo Hello, world!
 

  Ftest-Create-Changeset:
    needs: [ Development-Deploy-changeset ]
    environment: ftest
    if: always() && (needs.Development-Deploy-changeset.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo Hello, world!



  Ftest-Deploy-changeset:
    needs: [ Ftest-Create-Changeset ]
    environment: ftest
    if: always() && (needs.Ftest-Create-Changeset.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo Hello, world!
 



  Stage-Create-Changeset:
    needs: [ Ftest-Deploy-changeset ]
    environment: stage
    if: always() && (needs.Ftest-Deploy-changeset.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo Hello, world!



  Stage-Deploy-changeset:
    needs: [ Stage-Create-Changeset ]
    environment: stage
    if: always() && (needs.Stage-Create-Changeset.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo Hello, world!




  Ptest-Create-Changeset:
    needs: [ Stage-Deploy-changeset ]
    environment: ptest
    if: always() && (needs.Stage-Deploy-changeset.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo Hello, world!



  Ptest-Deploy-changeset:
    needs: [ Ptest-Create-Changeset ]
    environment: ptest
    if: always() && (needs.Ptest-Create-Changeset.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run a one-line script
        run: echo Hello, world!



  Prod-Create-Changeset:
    needs: [ Ptest-Deploy-changeset ]
    environment: production
    if: always() && (needs.Ptest-Deploy-changeset.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run
        run: echo "Hello"
        



  Prod-Deploy-changeset:
    needs: [ Prod-Create-Changeset ]
    environment: production
    if: always() && (needs.Prod-Create-Changeset.result == 'success')
    runs-on: ubuntu-latest
    steps:  
      - name: Checkout code from master branch
        uses: actions/checkout@v2
        
      #- name: Configure AWS Credentials
      #  run: |
       #   aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        #  aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         # aws configure set region ${{ vars.AWS_REGION }}    
          #aws cloudformation create-change-set --stack-name my-application --template-body file://s3_bucket.yaml --parameters ParameterKey=MyBucketName,UsePreviousValue=true
          
      - name: Deploy  
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: "s3Bucket"
          template: "s3_bucket.yaml"
          no-fail-on-empty-changeset: "1"
          parameter-overrides: "MyBucketName=mys3bucketnewlti"


